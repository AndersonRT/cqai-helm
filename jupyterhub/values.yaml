hub:
  service:
    type: ClusterIP
    ports:
      nodePort:
  baseUrl: /
  cookieSecret: aaaaaaaaaaaaaaaaaaaa
  publicURL:
  uid: 1000
  fsGid: 1000
  nodeSelector: {}
  concurrentSpawnLimit: 64
  consecutiveFailureLimit: 5
  activeServerLimit:
  deploymentStrategy:
    # sqlite-pvc backed hub requires Recreate strategy to work
    type: Recreate
    # This is required for upgrading to work
    rollingUpdate:
  db:
    type: sqlite-memory
    upgrade:
    pvc:
      annotations: {}
      selector: {}
      accessModes:
        - ReadWriteOnce
      storage: 1Gi
      subPath:
      storageClassName:
    url:
  labels: {}
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /hub/metrics
  extraConfig: |
  
    import os
    
    tmpVal = os.environ.get("JUPYTERHUB_USER")
    
    c.Spawner.cmd = ['jupyter-labhub']

    #from subprocess import check_call
    #def my_hook(spawner):
    #  username = spawner.user.name
    #  check_call(['./examples/bootstrap-script/bootstrap.sh', username])

    #c.Spawner.pre_spawn_hook = my_hook

    import hashauthenticator
    class MyAuthenticator(hashauthenticator.HashAuthenticator):
      from tornado import gen

      @gen.coroutine
      def pre_spawn_start(self,user,spawner):
        auth_state = yield user.get_auth_state()
        if not auth_state:
          return
        spawner.environment['BLAH']='BLAH'



    c.JupyterHub.authenticator_class = MyAuthenticator #'hashauthenticator.HashAuthenticator'
    c.HashAuthenticator.secret_key = 'test'  # Defaults to ''
    c.HashAuthenticator.password_length = 6          # Defaults to 6
    c.HashAuthenticator.show_logins = True            # Optional, defaults to False
    
    from kubernetes import client
    def modify_pod_hook(spawner, pod):
        pod.spec.containers[0].security_context = client.V1SecurityContext(
            privileged=True,
            capabilities=client.V1Capabilities(
                add=['SYS_ADMIN']
            )
        )
        return pod

    c.KubeSpawner.modify_pod_hook = modify_pod_hook
    #c.KubeSpawner.environment = {'test1':'a','test2':'b'}
    import time
    c.KubeSpawner.environment = {
       "DEFAULT_ARGS": str(os.environ),
       "CURRENT_TIME": str(time.time())
    }
    
  extraConfigMap: {}
  extraEnv: {}
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  image:
    name: infra.cqai.ktginnovation.com/jhub
    tag: 'latest'
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
  services: {}
  imagePullPolicy: IfNotPresent
  pdb:
    enabled: true
  networkPolicy:
    enabled: true
    egress:
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
  allowNamedServers: false


rbac:
  enabled: true


proxy:
  secretToken: '43e08ee26c154c6341ebdc854ce2da8164f96982dc780d753e9246b4d5326da7'
  service:
    type: NodePort
    labels: {}
    annotations: {}
    nodePorts:
      http: 
      https: 
  chp:
    image:
      name: jupyterhub/configurable-http-proxy
      tag: 3.0.0
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
  nginx:
    image:
      name: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
      tag: 0.15.0
      pullPolicy: IfNotPresent
    proxyBodySize: 64m
    resources: {}
  lego:
    image:
      name: jetstack/kube-lego
      tag: 0.1.6
      pullPolicy: IfNotPresent
    resources: {}
  labels: {}
  nodeSelector: {}
  pdb:
    enabled: true
  https:
    enabled: true
    type: letsencrypt
    #type: letsencrypt, manual, secret
    letsencrypt:
      contactEmail: ''
    manual:
      key:
      cert:
    secret:
      name: ''
      key: ''
      crt: ''
    hosts: []
  networkPolicy:
    enabled: false
    egress:
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0


auth:
  type: custom
  whitelist:
    users:
  admin:
    access: true
    users:
    - admin
  custom:
    className: 'hashauthenticator.HashAuthenticator'
  state:
    enabled: false
    cryptoKey:


#auth:
#  type: dummy
#  whitelist:
#    users:
#  admin:
#    access: true
#    users:
#  dummy:
#    password:
#  ldap:
#    dn:
#      search: {}
#      user: {}
#    user: {}
#  state:
#    enabled: false
#    cryptoKey:

singleuser:
  networkTools:
    image:
      name: jupyterhub/k8s-network-tools
      tag: 'c7f70f9'
  cloudMetadata:
    enabled: false
    ip: 169.254.169.254
  networkPolicy:
    enabled: false
    egress:
    # Required egress is handled by other rules so it's safe to modify this
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
                - 169.254.169.254/32
  events: true
  extraAnnotations: {}
  extraLabels: {}
  extraEnv: {}
  lifecycleHooks:
    postStart:
      exec:
        command: 
          - "sh"
          - "-c"
          - >
            mkdir market-data shared-scripts tutorials alternative-datasets user-data;
            cp /base/.condarc .condarc;
            s3fs cloudquant:/mktdb5 market-data -o allow_other -o endpoint=us-east-2 -o passwd_file=/base/.general-passwd-s3fs -o umask=222;
            s3fs cloudquant:/mktdb5/alternative-datasets alternative-datasets -o allow_other -o endpoint=us-east-2 -o passwd_file=/base/.general-passwd-s3fs -o umask=222;
            s3fs cqai-shared-scripts shared-scripts -o allow_other -o passwd_file=/base/.general-passwd-s3fs -o umask=222;
            s3fs cqai-tutorials tutorials -o allow_other -o passwd_file=/base/.general-passwd-s3fs -o umask=222;
  initContainers:
  nodeSelector: {}
  uid: 1000
  fsGid: 100
  serviceAccountName:
  schedulerStrategy:
  storage:
    type: dynamic
    extraVolumes:
      - name: fuse
        hostPath:
          path: /dev/fuse
    extraVolumeMounts:
      - name: fuse
        mountPath: /dev/fuse
    static:
      pvcName:
      subPath: '{username}'
    capacity: 10Gi
    homeMountPath: /home/jovyan
    dynamic:
      storageClass: longhorn
      pvcNameTemplate: claim-{username}{servername}
      volumeNameTemplate: volume-{username}{servername}
      storageAccessModes: [ReadWriteOnce]
  image:
    name: infra.cqai.ktginnovation.com/cqai-notebook-basic
    tag: latest
    pullPolicy: IfNotPresent
  imagePullSecret:
    enabled: false
    registry: 
    username: 
    email:
    password:
  startTimeout: 300
  cpu:
    limit:
    guarantee:
  memory:
    limit:
    guarantee: 1G
  extraResource:
    limits: {}
    guarantees: {}
  cmd: jupyterhub-singleuser
  defaultUrl: /lab


prePuller:
  hook:
    enabled: true
    extraEnv: {}
    image:
      name: jupyterhub/k8s-image-awaiter
      tag: 'c7f70f9'
  continuous:
    enabled: false
  extraImages: []
  pause:
    image:
      name: gcr.io/google_containers/pause
      tag: '3.0'


ingress:
  enabled: false
  annotations: {}
  hosts: []
  tls:


cull:
  enabled: true
  users: false
  timeout: 3600
  every: 600
  concurrency: 10
  maxAge: 0
  podCuller:
    image:
      name: jupyterhub/k8s-pod-culler
      tag: 'c7f70f9'


debug:
  enabled: true
